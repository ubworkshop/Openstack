#!/usr/bin/env /usr/bin/python
'''Python module to query the RabbitMQ Management Plugin REST API and get
results that can then be used by Zabbix.'''
import json
import argparse
import ConfigParser
import socket
import urllib2
import subprocess
import tempfile
import os
import commands
import logging


class RabbitMQAPI(object):
    '''Class for RabbitMQ Management API'''

    def __init__(self, user_name='guest', password='guest', host_name='',
                 port=15672, conf='/etc/zabbix/zabbix_agentd.conf'):
        self.user_name = user_name
        self.password = password
        self.host_name = host_name or socket.gethostname()
        self.port = port
        self.conf = conf

    def call_api(self, path):
        '''Call the REST API and convert the results into JSON.'''
        url = 'http://{0}:{1}/api/{2}'.format(self.host_name, self.port, path)
        password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
        password_mgr.add_password(None, url, self.user_name, self.password)
        handler = urllib2.HTTPBasicAuthHandler(password_mgr)
        return json.loads(urllib2.build_opener(handler).open(url).read())

    def list_queues(self, filters=None):
        '''
        List all of the RabbitMQ queues, filtered against the filters provided
        in .rab.auth. See README.md for more information.
        '''
        queues = []
        if not filters:
            filters = [{}]
        for queue in self.call_api('queues'):
            for _filter in filters:
                check = [(x, y) for x, y in queue.items() if x in _filter]
                shared_items = set(_filter.items()).intersection(check)
                if len(shared_items) == len(_filter):
                    element = {'{#VHOSTNAME}': queue['vhost'],
                               '{#QUEUENAME}': queue['name']}
                    queues.append(element)
                    break
        return queues

    def list_nodes(self):
        '''Lists all rabbitMQ nodes in the cluster'''
        nodes = []
        for node in self.call_api('nodes'):
            # We need to return the node name, because Zabbix
            # does not support @ as an item paramater
            name = node['name'].split('@')[1]
            element = {'{#NODENAME}': name,
                       '{#NODETYPE}': node['type']}
            nodes.append(element)
        return nodes

    def check_queue(self, filters=None, server="10.255.0.183"):
        '''Return the value for a specific item in a queue's details.'''
        return_code = 0
        if not filters:
            filters = [{}]

        rdatafile = tempfile.NamedTemporaryFile(delete=False)

        for queue in self.call_api('queues'):
            success = False
            for _filter in filters:
                check = [(x, y) for x, y in queue.items() if x in _filter]
                shared_items = set(_filter.items()).intersection(check)
                if len(shared_items) == len(_filter):
                    success = True
                    break
            if success:
                self._prepare_data(queue, rdatafile)

        rdatafile.close()
        return_code |= self._send_data(rdatafile, server)
        os.unlink(rdatafile.name)
        return return_code

    def _prepare_data(self, queue, tmpfile):
        '''Prepare the queue data for sending'''
        status, hostname = commands.getstatusoutput('hostname -f')
        for item in ['memory', 'messages', 'messages_unacknowledged',
                     'consumers']:
            key = '"rabbitmq[{0},queue_{1},{2}]"'
            key = key.format(queue['vhost'], item, queue['name'])
            value = queue.get(item, 0)
            tmpfile.write("%s %s %s\n" % (hostname, key, value))

    def _send_data(self, tmpfile, server):
        '''Send the queue data to Zabbix.'''
        args = 'timeout 3 zabbix_sender -z {0} -i {1}'
        return_code = 0
        return_code |= subprocess.call(args.format(server, tmpfile.name),
                                       shell=True, stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
        return return_code

    def check_aliveness(self):
        '''Check the aliveness status of a given vhost.'''
        return self.call_api('aliveness-test/%2f')['status']

    def check_server(self, item, node_name=None):
        '''Return the value for a specific item in a node's details.'''
        overview = self.call_api('overview')
        if item == 'message_stats_deliver_get':
            return overview.get('message_stats', {}) \
                           .get('deliver_get_details', {}).get('rate', 0)
        elif item == 'message_stats_publish':
            return overview.get('message_stats', {}) \
                           .get('publish_details', {}).get('rate', 0)
        elif item == 'message_stats_ack':
            return overview.get('message_stats', {}) \
                           .get('ack_details', {}).get('rate', 0)
        elif item == 'message_stats_confirm':
            return overview.get('message_stats', {}) \
                           .get('confirm_details', {}).get('rate', 0)
        elif item == 'message_stats_deliver':
            return overview.get('message_stats', {}) \
                           .get('deliver_details', {}).get('rate', 0)
        elif item == 'message_count_total':
            return overview.get('queue_totals', {}) \
                           .get('messages', 0)
        elif item == 'message_count_ready':
            return overview.get('queue_totals', {}) \
                           .get('messages_ready', 0)
        elif item == 'message_count_unacknowledged':
            return overview.get('queue_totals', {}) \
                           .get('messages_unacknowledged', 0)
        elif item == 'rabbitmq_version':
            return overview.get('rabbitmq_version', 'None')
        elif item == 'connections':
            return overview.get('object_totals', {}).get('connections', 0)
        elif item == 'channels':
            return overview.get('object_totals', {}).get('channels', 0)
        elif item == 'consumers':
            return overview.get('object_totals', {}).get('consumers', 0)
        elif item == 'exchanges':
            return overview.get('object_totals', {}).get('exchanges', 0)
        elif item == 'queues':
            return overview.get('object_totals', {}).get('queues', 0)
        '''Return the value for a specific item in a node's details.'''
        node_name = node_name.split('.')[0]
        nodeInfo = self.call_api('nodes')
        for nodeData in nodeInfo:
            logging.debug("Checking to see if node name {0} is in {1} "
                          "for item {2} found {3} nodes"
                          .format(node_name, nodeData['name'],
                                  item, len(nodeInfo)))
            if node_name in nodeData['name'] or len(nodeInfo) == 1:
                logging.debug("Got data from node {0} of {1} "
                              .format(node_name, nodeData.get(item)))
                return nodeData.get(item)
        return 'Not Found'


def main():
    '''Command-line parameters and decoding for Zabbix use/consumption.'''
    choices = ['list_queues', 'list_nodes', 'queues', 'check_aliveness',
               'server']
    parser = argparse.ArgumentParser()
    parser.add_argument('--check', choices=choices, action='store',
                        help='Type of check')
    parser.add_argument('--metric', action='store',
                        help='Which metric to evaluate', default='')
    parser.add_argument('--filters', action='store',
                        help='Filter used queues (see README)')
    parser.add_argument('--node', action='store',
                        help='Which node to check (valid for --check=server)')
    parser.add_argument('--conf', action='store',
                        default='/etc/zabbix/zabbix_agentd.conf')
    options = parser.parse_args()

    config = ConfigParser.ConfigParser()
    config.read("/usr/bin/zabbix-config.ini")
    username = config.get('rabbitmq', 'username')
    password = config.get('rabbitmq', 'password')
    hostname = config.get('rabbitmq', 'host')
    port = config.getint('rabbitmq', 'port')
    if not options.check:
        parser.error('At least one check should be specified')
    api = RabbitMQAPI(user_name=username, password=password,
                      host_name=hostname, port=port,
                      conf=options.conf)
    if options.filters:
        try:
            filters = json.loads(options.filters)
        except KeyError:
            parser.error('Invalid filters object.')
    else:
        filters = [{}]
    if not isinstance(filters, (list, tuple)):
        filters = [filters]
    if options.check == 'list_queues':
        print json.dumps({'data': api.list_queues(filters)})
    elif options.check == 'list_nodes':
        print json.dumps({'data': api.list_nodes()})
    elif options.check == 'queues':
        print api.check_queue(filters)
    elif options.check == 'check_aliveness':
        print api.check_aliveness()
    elif options.check == 'server':
        if not options.metric:
            parser.error('Missing required parameter: "metric"')
        else:
            if options.node:
                print api.check_server(options.metric, options.node)
            else:
                print api.check_server(options.metric)

if __name__ == '__main__':
    main()

