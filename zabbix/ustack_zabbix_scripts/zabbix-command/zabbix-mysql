#!/usr/bin/env python
import json
import argparse
import ConfigParser
import pymysql

class MysqlOps(object):
    '''class for mysql get data'''
    def __init__(self, host='localhost', user=None, passwd=None, port=3306):
        self.host = host
        self.user = user
        self.passwd = passwd
        self.port = port
        self.conn = self.get_connection()

    def get_connection(self):
        try:
            connect = pymysql.connect(host=self.host,
                                      user=self.user,
                                      passwd=self.passwd,
                                      port=self.port,
                                      charset='utf8')
        except pymysql.Error, e:
            print "pymysql.Error %s", e
        else:
            return connect

    def execute_sql(self, sql, fetchall=False):
        if sql:
            curs = self.conn.cursor(cursor=pymysql.cursors.DictCursor)
            curs.execute(sql)
            if fetchall:
                result = curs.fetchall()
            else:
                result = curs.fetchone()
            return result
        else:
            print "there is no sql to execute."

    def show_global_status(self, item):
        if item == 'max_connections':
            sql = "show variables like '%s'"% item
        else:
            sql = "show global status like '%s'" % item
        result = self.execute_sql(sql)
        return result.get('Value', 0)

    def get_database(self, get_list=False):
        sql = "show databases"
        json_data = {"data": []}
        list_data = []
        result = self.execute_sql(sql, fetchall=True)
        if get_list:
            for data in result:
                list_data.append(data.get('Database'))
            return list_data
        else:
            for data in result:
                json_data["data"].append({"{#DATABASE_NAME}":
                                         data.get('Database')})
            return json.dumps(json_data)

    def get_database_version(self):
            result = self.execute_sql('select version() as version')
            return result.get('version', 0)

    def get_database_size(self, dbname=None, item=None):
        ''' item can be: total,data_length,table_rows,index_length,data_free'''

        db_list = self.get_database(get_list=True)
        if item == "total":
            if dbname == 'all':
                sql = ("SELECT sum(data_length) as sum_data_length,"
                       "sum(index_length) as sum_index_length "
                       "from information_schema.TABLES")
            elif dbname in db_list:
                sql = ("SELECT sum(data_length) as sum_data_length,"
                       "sum(index_length) as sum_index_length "
                       "from information_schema.TABLES "
                       "where table_schema like '%s'" % dbname)
            else:
                print "the database does not exists."
                return
            result = self.execute_sql(sql)
            if result['sum_data_length'] and result['sum_index_length']:
                return result['sum_data_length'] + result['sum_index_length']
            else:
                return 0
        else:
            if dbname in db_list:
                sql = ("SELECT sum(%s) as sum "
                       "from information_schema.TABLES "
                       "where table_schema like '%s'" % (item, dbname))
            elif dbname == 'all':
                sql = ("SELECT sum(%s) as sum "
                       "from information_schema.TABLES" % item)
            else:
                print "the database does not exists."
                return
            result = self.execute_sql(sql)
            return result['sum'] or 0

    def __del__(self):
        '''free source.'''
        try:
            self._cursor.close()
            self._connect.close()
        except:
            pass

    def close(self):
        self.__del__()


def main():

    choices = ['Bytes_received', 'Bytes_sent', 'Com_commit', 'Com_delete',
               'Com_insert', 'Com_select', 'Com_update', 'Innodb_data_reads',
               'Innodb_data_writes', 'Threads_connected', 'Threads_running',
               'Connection_errors_internal', 'Qcache_hits', 'Queries',
               'Connection_errors_max_connections','Uptime', 'max_connections',
               'Slow_queries']
    db_choice = ['data_length', 'table_rows', 'index_length', 'data_free',
                 'total']

    parser = argparse.ArgumentParser(description="get data from mysql",
                                     usage=("--metric=[args] or "
                                            "--database=[dbname] "
                                            "--size=[args] "))
    parser.add_argument('--database', action='store',
                        help=("database for you want "
                              "get data,default: all database"))
    parser.add_argument('--size', choices=db_choice, action='store',
                        help="get database use from mysql")
    parser.add_argument('--metric', choices=choices, action='store',
                        help="get data from mysql")
    parser.add_argument('--database-json', action='store_true',
                        help="return all database in a json format ")
    parser.add_argument('--version', action='store_true',
                        help='get the database version')
    args = parser.parse_args()

    config = ConfigParser.ConfigParser()
    config.read("/usr/bin/zabbix-config.ini")
    dbuser = config.get('mysqld', 'dbuser')
    dbpasswd = config.get('mysqld', 'dbpasswd')
    dbport = config.getint('mysqld', 'dbport')

    instance = MysqlOps(user=dbuser, passwd=dbpasswd, port=dbport)

    if args.metric:
        print instance.show_global_status(args.metric)
    elif args.database and args.size:
        print instance.get_database_size(dbname=args.database,
                                         item=args.size)
    elif args.database_json:
        print instance.get_database()
    elif args.version:
        print instance.get_database_version()
    else:
        print "you should input some args,please see --help"
        print args.help
    instance.close()


if __name__ == '__main__':
    main()

